@{
    ViewData["Title"] = "Create Shipping";
}

<h2 class="text-center mt-3">Create New Shipping</h2>

<div class="container-sm" style="max-width: 600px;">
    <form id="shipping-form">
        <div class="mb-2">
            <label for="soNumber" class="form-label">SO Number</label>
            <input type="text" class="form-control form-control-sm" id="soNumber" name="soNumber" required>
        </div>
        <div class="mb-2">
            <label for="destination" class="form-label">Destination</label>
            <input type="text" class="form-control form-control-sm" id="destination" name="destination" required>
        </div>
        <div class="mb-2">
            <label for="date" class="form-label">Date</label>
            <input type="date" class="form-control form-control-sm" id="date" name="date" required>
        </div>

        <fieldset id="do-form" disabled>
            <h5 class="mt-3">Delivery Order Details</h5>
            <div class="row">
                <div class="col-md-4 mb-2">
                    <label for="doNumber" class="form-label">DO Number</label>
                    <input type="text" class="form-control form-control-sm" id="doNumber">
                </div>
                <div class="col-md-4 mb-2">
                    <label for="model" class="form-label">Model</label>
                    <select id="model" class="form-control form-control-sm" name="ModelId" required>
                        <option value="">Select Model</option>
                        @foreach (var item in ViewBag.ListModel)
                        {
                            <option value="@item.ModelId">@item.ModelName</option>
                        }
                    </select>
                </div>

                <div class="col-md-4 mb-2">
                    <label for="qty" class="form-label">Quantity</label>
                    <input type="number" class="form-control form-control-sm" id="qty">
                </div>
            </div>
            <button type="button" class="btn btn-info btn-sm w-100" id="add-do">Add DO</button>
        </fieldset>
    </form>

    <h5 class="mt-3">DO Records</h5>
    <div class="table-responsive" style="max-height: 250px; overflow-y: auto;">
        <table class="table table-bordered table-striped table-sm">
            <thead class="table-dark">
                <tr>
                    <th>Action</th>
                    <th>DO Number</th>
                    <th>Model</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody id="do-table-body">

            </tbody>
        </table>
    </div>
</div>

<div class="container-sm d-grid gap-2 mt-3" style="max-width: 600px;">
    <button type="button" class="btn btn-success btn-sm" id="save">Save</button>
    <button type="button" class="btn btn-secondary btn-sm" id="cancel">Cancel</button>
</div>

<script>
    document.getElementById("soNumber").addEventListener("input", function () {
        let doForm = document.getElementById("do-form");
        doForm.disabled = this.value.trim() === "" ? true : false;
    });

    document.getElementById("soNumber").addEventListener("blur", async function () {
        let soNumber = this.value.trim();
        if (soNumber) {
            try {
                let response = await fetch(`/Shipping/CheckSONumber?soNumber=${soNumber}`);
                let result = await response.json();
                if (result.exists) {
                    alert("SONumber already exists");
                    this.value = "";
                    document.getElementById("do-form").disabled = true;
                }
            } catch (error) {
                console.error("Error checking SONumber", error);
            }
        }
    });

    function updateButtonState() {
        let tableBody = document.getElementById("do-table-body");
        let hasData = tableBody.children.length > 0 && tableBody.children[0].textContent !== "No Data";

        document.getElementById("save").disabled = !hasData;
    }

    document.getElementById("add-do").addEventListener("click", async function () {
        let doNumber = document.getElementById("doNumber").value.trim();
        let modelSelect = document.getElementById("model");
        let model = modelSelect.value;
        let modelName = modelSelect.options[modelSelect.selectedIndex].text;
        let qty = document.getElementById("qty").value;

        if (!doNumber || !model || !qty) {
            alert("Please fill all DO fields!");
            return;
        }
        let existingRows = document.querySelectorAll("#do-table-body tr");
        for (let row of existingRows) {
            let existingDoNumber = row.cells[1].textContent;
            if (existingDoNumber === doNumber) {
                alert("DO Number already exist! Use different DONumber.");
                return;
            }
        }

        let tableBody = document.getElementById("do-table-body");
        let newRow = document.createElement("tr");
        newRow.innerHTML = `
        <td class="text-center">
            <button type="button" class="btn btn-danger btn-sm delete-row"> Delete </button>
        </td>
        <td>${doNumber}</td>
        <td data-model-id="${model}">${modelName}</td>
        <td>${qty}</td>
    `;

        tableBody.appendChild(newRow);
        document.getElementById("doNumber").value = "";
        document.getElementById("model").value = "";
        document.getElementById("qty").value = "";

        updateButtonState();
    });

    document.addEventListener("click", function (e) {
        if (e.target.closest(".delete-row")) {
            let row = e.target.closest("tr");
            let doNumber = row.cells[1].textContent;

            if (confirm(`Are you sure you want to delete DO Number: ${doNumber}?`)) {
                row.remove();
                updateButtonState();
            }
        }
    });

    document.getElementById("save").addEventListener("click", async function () {
        let soNumber = document.getElementById("soNumber").value.trim();
        let destination = document.getElementById("destination").value.trim();
        let date = document.getElementById("date").value.trim();

        if (!soNumber || !destination || !date) {
            alert("Please fill all required fields!");
            return;
        }

        let formattedDate = new Date(date).toISOString().split('T')[0];
        let doList = [];
        let tableRows = document.querySelectorAll("#do-table-body tr");

        for (let row of tableRows) {
            doList.push({
                Donumber: row.cells[1].textContent.trim(),
                ModelId: parseInt(row.cells[2].getAttribute("data-model-id")),
                Qty: parseInt(row.cells[3].textContent.trim())
            });
        }

        if (doList.length === 0) {
            alert("Please add at least one DO!");
            return;
        }

        let payload = {
            SONumber: soNumber,
            Destination: destination,
            Date: formattedDate,
            DeliveryOrders: doList
        };

        console.log("Sending payload:", payload);

        try {
            let response = await fetch('/Shipping/CreatePost', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            let result = await response.json();
            console.log(" Response received:", result);

            if (response.ok) {
                alert("Data saved successfully!");
                document.getElementById("do-table-body").innerHTML = "";
            } else {
                alert("Failed to save data: " + result.message);
            }
        } catch (error) {
            console.error("Fetch Error:", error);
            alert("An error occurred while saving data!");
        }
    });

    document.getElementById("cancel").addEventListener("click", function () {

        document.getElementById("do-form").disabled = true;

        updateButtonState();
    });

    updateButtonState();
</script>
