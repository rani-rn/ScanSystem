@{
    ViewData["Title"] = "Detail Shipping";
}
<h2 class="text-center mt-3">Detail Shipping</h2>

<div class="container-sm" style="max-width: 600px;">
    <form id="shipping-form">
        <div class="mb-2">
            <label for="soNumber" class="form-label">SO Number</label>
            <input type="text" class="form-control form-control-sm" id="soNumber" name="soNumber"
                value="@Model.SONumber" required>
        </div>
        <div class="mb-2">
            <label for="destination" class="form-label">Destination</label>
            <input type="text" class="form-control form-control-sm" id="destination" name="destination"
                value="@Model.Destination" required>
        </div>
        <div class="mb-2">
            <label for="date" class="form-label">Date</label>
            <input type="date" class="form-control form-control-sm" id="date" name="date"
                value="@Model.Date.ToString("yyyy-MM-dd")" required>
        </div>

        <fieldset id="do-form" disabled>
            <h5 class="mt-3">Delivery Order Details</h5>
            <div class="row">
                <div class="col-md-4 mb-2">
                    <label for="doNumber" class="form-label">DO Number</label>
                    <input type="text" class="form-control form-control-sm" id="doNumber">
                </div>
                <div class="col-md-4 mb-2">
                    <label for="model" class="form-label">Model</label>
                    <select id="model" class="form-control form-control-sm" name="ModelId" required>
                        <option value="">Select Model</option>
                        @foreach (var item in ViewBag.ListModel)
                        {
                            <option value="@item.ModelId">@item.ModelName</option>
                        }
                    </select>
                </div>

                <div class="col-md-4 mb-2">
                    <label for="qty" class="form-label">Quantity</label>
                    <input type="number" class="form-control form-control-sm" id="qty">
                </div>
            </div>
            <button type="button" class="btn btn-info btn-sm w-100" id="add-do">Add DO</button>
        </fieldset>
    </form>

    <h5 class="mt-3">DO Records</h5>
    <div class="table-responsive" style="max-height: 250px; overflow-y: auto;">
        <table class="table table-bordered" id="doTable">
            <thead class="table-dark">
                <tr>
                    <th>Action</th>
                    <th>DO Number</th>
                    <th>Model</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody id="do-table-body">
            </tbody>
        </table>
    </div>
</div>

<div class="container-sm d-grid gap-2 mt-3" style="max-width: 600px;">
    <button type="button" class="btn btn-warning btn-sm" id="update">Edit</button>
    <button type="button" class="btn btn-secondary btn-sm" id="cancel">Cancel</button>
</div>

<script>
    document.addEventListener("DOMContentLoaded", async function () {
        let soNumberInput = document.getElementById("soNumber");
        let doForm = document.getElementById("do-form");

        if (soNumberInput.value.trim()) {
            await fetchShippingData(soNumberInput.value.trim());
        }

        soNumberInput.addEventListener("change", async function () {
            let soNumber = this.value.trim();
            if (soNumber) {
                await fetchShippingData(soNumber);
            }
        });

        async function fetchShippingData(soNumber) {
            try {
                let soIdResponse = await fetch(`/Shipping/GetSOId?soNumber=${soNumber}`);
                let soIdData = await soIdResponse.json();

                if (!soIdData.success) {
                    console.error("SO not found:", soIdData.message);
                    return;
                }

                let soId = soIdData.soId;
                let response = await fetch(`/Shipping/GetShippingData/${soId}`);
                let data = await response.json();

                console.log("Shipping Data:", data);

                if (data.success) {
                    fillDOData(data.data);
                    doForm.removeAttribute("disabled"); // Aktifkan form DO setelah data ditemukan
                }
            } catch (error) {
                console.error("Error fetching shipping data:", error);
            }
        }

        function fillDOData(data) {
            let tableBody = document.getElementById("do-table-body");
            tableBody.innerHTML = ""; // Hapus data sebelumnya

            console.log("Filling DO Data:", data);

            data.forEach(order => {
                let newRow = document.createElement("tr");
                newRow.innerHTML = `
                    <td class="text-center">
                        <button type="button" class="btn btn-danger btn-sm delete-row">Delete</button>
                    </td>
                    <td>${order.donumber}</td> 
                    <td data-model-id="${order.modelId}">${order.modelName}</td>
                    <td>${order.qty}</td>
                `;
                tableBody.appendChild(newRow);
            });
        }

        document.getElementById("add-do").addEventListener("click", function () {
            let doNumber = document.getElementById("doNumber").value.trim();
            let modelId = document.getElementById("model").value;
            let modelName = document.getElementById("model").selectedOptions[0].text;
            let qty = document.getElementById("qty").value.trim();

            if (!doNumber || !modelId || !qty) {
                alert("Please fill all fields before adding.");
                return;
            }
            if (qty <= 0) {
                alert("Quantity must be greater than zero.");
                return;
            }

            let tableBody = document.getElementById("do-table-body");
            let newRow = document.createElement("tr");
            newRow.innerHTML = `
                <td class="text-center">
                    <button type="button" class="btn btn-danger btn-sm delete-row">Delete</button>
                </td>
                <td>${doNumber}</td>
                <td data-model-id="${modelId}">${modelName}</td>
                <td>${qty}</td>
            `;

            tableBody.appendChild(newRow);

            document.getElementById("doNumber").value = "";
            document.getElementById("qty").value = "";
        });

        document.addEventListener("click", function (event) {
            if (event.target.classList.contains("delete-row")) {
                event.target.closest("tr").remove();
            }
        });

        document.getElementById("update").addEventListener("click", async function () {
            let soNumber = document.getElementById("soNumber").value.trim();
            let doNumbers = Array.from(document.querySelectorAll("#do-table-body tr td:nth-child(2)")).map(td => td.innerText);

            let checkSOResponse = await fetch(`/Shipping/CheckSONumber?soNumber=${soNumber}`);
            let soData = await checkSOResponse.json();
            if (soData.exists) {
                alert("SONumber already exists. Please use a different SONumber.");
                return;
            }

            for (let doNumber of doNumbers) {
                let checkDOResponse = await fetch(`/Shipping/CheckDONumber?doNumber=${doNumber}`);
                let doData = await checkDOResponse.json();
                if (doData.exists) {
                    alert(`DONumber ${doNumber} already exists. Please use a different DONumber.`);
                    return;
                }
            }

            try {
                let response = await fetch(`/Shipping/UpdatePost/${id}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        SONumber: soNumber,
                        Destination: document.getElementById("destination").value.trim(),
                        Date: document.getElementById("date").value,
                        DeliveryOrders: doNumbers.map(doNumber => ({
                            Donumber: doNumber,
                            ModelId: document.querySelector(`[data-model-id][data-do-number="${doNumber}"]`).dataset.modelId,
                            Qty: document.querySelector(`[data-qty][data-do-number="${doNumber}"]`).innerText
                        }))
                    })
                });
                let result = await response.json();
                if (response.ok) {
                    alert(result.message);
                    window.location.href = "/Shipping";
                } else {
                    alert(result.message);
                }
            } catch (error) {
                console.error("Update failed:", error);
            }
        });
    });
</script>
