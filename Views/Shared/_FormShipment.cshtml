<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    .container-form {
        max-width: 800px;
        margin: auto;
        padding: 20px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 50px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-row {
        display: flex;
        gap: 10px;
    }

    .stats {
        display: flex;
        justify-content: space-between;
        text-align: center;
        margin: 20px 0;
    }

    .stat-box {
        flex: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background: #f9f9f9;
    }

    .stats-box {
        background: yellow;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .buttons {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-top: 20px;
    }
</style>

<div class="container-form">
    <div class="form-group">
        <label for="deliveryOrder">Delivery Order</label>
        <select class="form-control" id="deliveryOrder">
            <option value=""></option>
        </select>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">Model
            <input type="text" class="form-control" id="model" placeholder="Model" readonly>
        </div>
        <div class="form-group col-md-6"> Destination
            <input type="text" class="form-control" id="destination" placeholder="Destination" readonly>
        </div>
    </div>
    <div class="form-group">
        <input type="text" class="form-control" id="serialNumber" placeholder="Serial Number" autofocus>
    </div>
    <div class="stats">
        <div class="stat-box">
            <h4>Package Size</h4>
            <p id="planQty">0</p>
        </div>
        <div class="stat-box stats-box">
            <h4>Actual</h4>
            <p id="actualQty">0</p>
        </div>
        <div class="stat-box">
            <h4>Countdown</h4>
            <p id="countdown">0</p>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Select</th>
                    <th>RFID</th>
                    <th>Serial Number</th>
                </tr>
            </thead>
            <tbody id="dataTable"></tbody>
        </table>
    </div>
    <div class="buttons">
        <button id="confirmBtn" class="btn btn-primary" disabled>Confirm</button>
        <button id="resetBtn" class="btn btn-danger">Reset List</button>
    </div>
</div>
<script>
    $(document).ready(function () {
        loadDeliveryOrders();
        $("#serialNumber").prop("disabled", true);

        function loadDeliveryOrders() {
            $.ajax({
                url: "/api/deliveryorder",
                method: "GET",
                success: function (data) {
                    let dropdown = $("#deliveryOrder");
                    dropdown.empty().append('<option value="">Select</option>');
                    $.each(data, function (index, item) {
                        dropdown.append(`<option value="${item.doid}" data-donumber="${item.donumber}">${item.donumber}</option>`);
                    });
                },
                error: function () {
                    Swal.fire("Error", "Failed to load delivery orders", "error");
                }
            });
        }

        $("#deliveryOrder").change(function () {
            let doId = $(this).val();
            if (doId) {
                loadDeliveryOrderDetails(doId);
                $("#serialNumber").prop("disabled", false);
            } else {
                clearDeliveryOrderDetails();
                $("#serialNumber").prop("disabled", true);
            }
        });

        function loadDeliveryOrderDetails(doId) {
            $.ajax({
                url: `/api/deliveryorder/${doId}`,
                method: "GET",
                success: function (data) {
                    $("#model").val(data.modelName);
                    $("#destination").val(data.destination);
                    $("#planQty").text(data.qty);
                    $("#actualQty").text(0);
                    $("#countdown").text(data.qty);
                },
                error: function () {
                    Swal.fire("Error", "Failed to load Delivery Order details", "error");
                }
            });
        }

        function clearDeliveryOrderDetails() {
            $("#model, #destination").val("");
            $("#planQty, #actualQty, #countdown").text("0");
            $("#dataTable").empty();
            $("#confirmBtn").prop("disabled", true);
        }

        function updateConfirmButton() {
            let planQty = parseInt($("#planQty").text());
            let actualQty = parseInt($("#actualQty").text());
            $("#confirmBtn").prop("disabled", actualQty !== planQty);
        }

        let scannedRFIDs = new Set();
        let scannedSerialNumbers = new Set();

        $("#serialNumber").on("change", function () {
            processScan();
        });

        function processScan() {
            let input = $("#serialNumber").val().trim();
            if (!input) return;

            if (isRFID(input)) {
                validateRFID(input);
            } else {
                validateSerialNumber(input);
            }
        }

        function isRFID(input) {
            return input.length <= 10 && !isNaN(input);
        }

        function validateRFID(rfid) {
            if (scannedRFIDs.has(rfid)) {
                Swal.fire("Error", "RFID has been scaned!", "warning");
                $("#serialNumber").val("").focus();
                return;
            }

            $.ajax({
                url: `/api/deliveryorder/validate/${rfid}`,
                method: "GET",
                success: function (response) {
                    if (!response || response.length === 0) {
                        Swal.fire("Error", "RFID not found!", "error");
                        $("#serialNumber").val("").focus();
                        return;
                    }

                    let serialNumbers = response.map(item => item.SerialNumber).filter(sn => sn);
                    let rfidTag = response.find(item => item.RFID)?.RFID;
                    let countSerialNumbers = serialNumbers.length || 1; 

                    scannedRFIDs.add(rfid);
                    serialNumbers.forEach(sn => scannedSerialNumbers.add(sn));

                    $("#dataTable").append(`
                <tr>
                    <td><input type="checkbox" class="row-checkbox"></td>
                    <td>${rfidTag}</td>
                    <td>${serialNumbers.join(", ")}</td>
                </tr>
            `);
            updateQuantities();

                    updateQuantities(countSerialNumbers);
                    $("#serialNumber").val("").focus();
                },
                error: function () {
                    Swal.fire("Error", "Failed to fetch RFID data", "error");
                }
            });
        }

        function validateSerialNumber(serialNumber) {
            if (scannedSerialNumbers.has(serialNumber)) {
                Swal.fire("Error", "Serial Number has been scanned!", "warning");
                $("#serialNumber").val("").focus();
                return;
            }

            $.ajax({
                url: `/api/deliveryorder/validate/${serialNumber}`,
                method: "GET",
                success: function (data) {
                    if (!data || data.length === 0) {
                        Swal.fire("Error", "Serial Number not found!", "error");
                        $("#serialNumber").val("").focus();
                        return;
                    }

                    data.forEach(item => {
                        let rfid = item.RFID ? item.RFID : "-"; 
                        let serial = item.SerialNumber ? item.SerialNumber : "-";

                        if (serial !== "-") {
                            scannedSerialNumbers.add(serial);
                        }
                        if (rfid !== "-") {
                            scannedRFIDs.add(rfid);
                        }

                        $("#dataTable").append(`
                    <tr>
                        <td><input type="checkbox" class="row-checkbox"></td>
                        <td>${rfid}</td>
                        <td>${serial}</td>
                    </tr>
                `);
                    });

                    updateQuantities(1);
                    $("#serialNumber").val("").focus();
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching RFID:", xhr.responseText);
                    Swal.fire("Error", "Gagal memvalidasi serial number", "error");
                }
            });
        }

        function updateQuantities() {
            let rowCount = $("#dataTable tr").length;
    let planQty = parseInt($("#planQty").text());

     if (actualQty > planQty) {
        Swal.fire("Warning", "Jumlah sudah memenuhi permintaan!", "warning");
        return;
    }

    $("#actualQty").text(rowCount);
    $("#countdown").text(planQty - rowCount);

    updateConfirmButton();
        }



        function recalculateQuantities() {
            let rowCount = $("#dataTable tr").length;
            let planQty = parseInt($("#planQty").text());

            $("#actualQty").text(rowCount);
            $("#countdown").text(planQty - rowCount);

            updateConfirmButton();
        }

        $("#confirmBtn").click(function () {
            Swal.fire({
                title: "Confirm All Scans?",
                text: "Are you sure all scans are complete?",
                icon: "question",
                showCancelButton: true,
                confirmButtonText: "Yes, Confirm",
                cancelButtonText: "No, Cancel"
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire("Success", "All scans confirmed!", "success");
                    $("#confirmBtn").prop("disabled", true);
                }
            });
        });

        $("#resetBtn").click(function () {
            let checkedItems = $(".row-checkbox:checked").closest("tr");

            if (checkedItems.length > 0) {
                Swal.fire({
                    title: "Are you sure?",
                    text: "Do you really want to remove the selected rows?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, remove it!",
                    cancelButtonText: "No, keep it"
                }).then((result) => {
                    if (result.isConfirmed) {
                        checkedItems.each(function () {
                            let serialNumber = $(this).find("td:eq(2)").text();
                            scannedSerialNumbers.delete(serialNumber);
                            $(this).remove();
                        });

                        recalculateQuantities();
                        Swal.fire("Deleted!", "Selected rows have been removed.", "success");
                    }
                });
            } else {
                Swal.fire({
                    title: "Are you sure?",
                    text: "Do you want to reset the entire scan list?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, reset it!",
                    cancelButtonText: "No, keep it"
                }).then((result) => {
                    if (result.isConfirmed) {
                        scannedRFIDs.clear();
                        scannedSerialNumbers.clear();
                        $("#dataTable").empty();
                        recalculateQuantities();
                        Swal.fire("Reset!", "Scan list has been reset.", "success");
                    }
                });
            }
        });
    });

</script>