<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    .container-form {
        max-width: 800px;
        margin: auto;
        padding: 20px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 50px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-row {
        display: flex;
        gap: 10px;
    }

    .stats {
        display: flex;
        justify-content: space-between;
        text-align: center;
        margin: 20px 0;
    }

    .stat-box {
        flex: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background: #f9f9f9;
    }

    .stats-box {
        background: yellow;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .buttons {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-top: 20px;
    }

    .disabled-select {
        pointer-events: none;
        background-color: #e9ecef;
        color: #6c757d;
        cursor: not-allowed;
    }
</style>

<div class="container-form">
    <div class="form-group">
        <label for="deliveryOrder">Delivery Order</label>
        <select class="form-control" id="deliveryOrder">
            <option value=""></option>
        </select>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="model">Model</label>
            <input type="text" class="form-control" id="model" placeholder="Model" readonly>
        </div>
        <div class="form-group col-md-6">
            <label for="destination">Destination</label>
            <input type="text" class="form-control" id="destination" placeholder="Destination" readonly>
        </div>

    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="contNo">Container</label>
            <input type="text" class="form-control" id="contNo" placeholder="Container" readonly>
        </div>
        <div class="form-group col-md-6">
            <label for="status">Status</label>
            <input type="text" class="form-control" id="status" placeholder="Status" readonly>
        </div>
    </div>
    <div class="form-group">
        <input type="text" class="form-control" id="serialNumber" placeholder="Serial Number" autofocus>
    </div>
    <div class="stats">
        <div class="stat-box">
            <h4>Demand</h4>
            <p id="planQty">0</p>
        </div>
        <div class="stat-box stats-box">
            <h4>Actual</h4>
            <p id="actualQty">0</p>
        </div>
        <div class="stat-box">
            <h4>Countdown</h4>
            <p id="countdown">0</p>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Select</th>
                    <th>Serial Number</th>
                </tr>
            </thead>
            <tbody id="dataTable"></tbody>
        </table>
    </div>
    <div class="buttons">
        <button id="confirmBtn" class="btn btn-primary" disabled>Confirm</button>
        <button id="resetBtn" class="btn btn-danger">Reset List</button>
    </div>
</div>
<script>
    $(document).ready(function () {
        const elements = {
            deliveryOrderSelect: $("#deliveryOrder"),
            serialNumberInput: $("#serialNumber"),
            dataTable: $("#dataTable"),
            confirmBtn: $("#confirmBtn"),
            resetBtn: $("#resetBtn"),
            planQty: $("#planQty"),
            actualQty: $("#actualQty"),
            countdown: $("#countdown"),
        };

        const scannedSerialNumbers = new Set();

        init();

        function init() {
            loadDeliveryOrders();
            elements.serialNumberInput.prop("disabled", true);

            elements.deliveryOrderSelect.change(handleDeliveryOrderChange);
            elements.serialNumberInput.on("change", processScan);
            elements.confirmBtn.click(confirmAllScans);

            elements.resetBtn.click(resetScanList);
        }

        async function loadDeliveryOrders() {
            try {
                const response = await fetch(`/api/deliveryorder`);
                const data = await response.json();
                elements.deliveryOrderSelect.empty().append('<option value="">Select</option>');
                data.forEach(item => {
                    elements.deliveryOrderSelect.append(
                        `<option value="${item.doid}" data-donumber="${item.donumber}">${item.donumber}</option>`
                    );
                });
            } catch {
                showAlert("Error", "Failed to load delivery orders", "error");
            }
        }

        function handleDeliveryOrderChange() {
            const doId = elements.deliveryOrderSelect.val();

            if ($("#tableItem tbody tr").length > 0) {
                elements.deliveryOrderSelect.addClass('disabled-select').prop('disabled', true);
                return;
            } else {
                elements.deliveryOrderSelect.removeClass('disabled-select').prop('disabled', false);
            }

            clearDeliveryOrderDetails();
            if (doId) loadDeliveryOrderDetails(doId);

            if (doId) {
                checkDOStatus(doId).then(() => {
                    elements.deliveryOrderSelect.data("previous", elements.deliveryOrderSelect.val());
                });
            }
        }


        async function checkDOStatus(doId) {
            try {
                const response = await fetch(`/api/deliveryorder/${doId}`);
                const data = await response.json();
                $("#status").val(data.status);

                const status = data.status.toLowerCase();
                const isCompleted = status === "completed";

                elements.serialNumberInput.prop("disabled", isCompleted);
                if (isCompleted) {
                    showAlert("Warning", "This DO has fulfilled the request and cannot be scanned again!", "warning");
                } else {
                    loadDeliveryOrderDetails(doId);
                }
            } catch {
                showAlert("Error", "Failed to check Delivery Order status", "error");
            }
        }

        async function loadDeliveryOrderDetails(doId) {
            try {
                const response = await fetch(`/api/deliveryorder/${doId}`);
                const data = await response.json();
                $("#model").val(data.modelName);
                $("#destination").val(data.destination);
                $("#contNo").val(data.contNo);
                $("#status").val(data.status);

                const actualQty = data.totalItems || 0;
                updateStats(data.qty, actualQty);
                elements.serialNumberInput.prop("disabled", false);
            } catch {
                showAlert("Error", "Failed to load Delivery Order details", "error");
            }
        }

        function clearDeliveryOrderDetails() {
            $("#model, #destination, #contNo").val("");
            updateStats(0, 0);
            elements.dataTable.empty();
            scannedSerialNumbers.clear();
            elements.confirmBtn.prop("disabled", false);
            elements.serialNumberInput.prop("disabled", true);
        }

        function processScan() {
            const input = elements.serialNumberInput.val().trim();
            if (!input) return;

            const requiredQty = parseInt(elements.planQty.text());
            const totalQty = scannedSerialNumbers.size;

            if (totalQty >= requiredQty) {
                showAlert("Warning", "Scan over demand", "warning");
                resetInput();
                return;
            }

            if (scannedSerialNumbers.has(input)) {
                showAlert("Warning", "Serial Number has been scanned!", "warning");
                resetInput();
                return;
            }

            isRFID(input) ? validateRFID(input) : validateSerialNumber(input);

        }

        function isRFID(input) {
            return input.startsWith("TAG");
        }

        async function validateRFID(rfid) {
            try {
                const response = await fetch(`/api/deliveryorder/validate/${rfid}`);
                const data = await response.json();

                if (!data || data.length === 0) {
                    showAlert("Error", "RFID not found!", "error");
                    resetInput();
                    return;
                }
                const deliveryOrderModel = $("#model").val();
                const mismatchedItems = data.filter(item => item.model !== deliveryOrderModel);

                if (mismatchedItems.length > 0) {
                    showAlert("Error", "RFID does not match the Delivery Order model!", "error");
                    resetInput();
                    return;
                }

                const requiredQty = parseInt(elements.planQty.text());
                const totalQty = scannedSerialNumbers.size + data.length;

                if (totalQty > requiredQty) {
                    showAlert("Warning", "the number of items in RFID exceeds demand!", "warning");
                    resetInput();
                    return;
                }

                data.forEach(item => addSerialNumber(item.serialNumber));
                resetInput();
            } catch {
                showAlert("Error", "Failed to validate RFID", "error");
            }
        }

        async function validateSerialNumber(serialNumber) {
            try {
                const response = await fetch(`/api/deliveryorder/validate/${serialNumber}`);
                const data = await response.json();

                if (!data || data.length === 0) {
                    showAlert("Error", "Serial Number not found!", "error");
                    resetInput();
                    return;
                }

                const deliveryOrderModel = $("#model").val();
                if (data[0].model !== deliveryOrderModel) {
                    showAlert("Error", "Model does not match!", "error");
                    resetInput();
                    return;
                }

                addSerialNumber(serialNumber);
                resetInput();
            } catch {
                showAlert("Error", "Failed to validate Serial Number", "error");
            }
        }

        function addSerialNumber(serial) {
            if (!serial || scannedSerialNumbers.has(serial)) return;

            scannedSerialNumbers.add(serial);
            elements.dataTable.append(`
            <tr>
                <td><input type="checkbox" class="row-checkbox"></td>
                <td>${serial}</td>
            </tr>
        `);

            updateQuantities();
            elements.deliveryOrderSelect.prop('disabled', true);
            updateStats(parseInt(elements.planQty.text()), scannedSerialNumbers.size);
            elements.dataTable.scrollTop(elements.dataTable[0].scrollHeight);
        }

        function updateQuantities() {
            const rowCount = elements.dataTable.find("tr").length;
            const planned = parseInt(elements.planQty.text());

            updateStats(planned, rowCount);
        }

        function updateStats(planned, actual) {
            elements.planQty.text(planned);
            elements.actualQty.text(actual);
            elements.countdown.text(planned - actual);

            elements.confirmBtn.prop("disabled", actual === 0);
        }

        async function confirmAllScans(event) {
            event.preventDefault();
            const serialNumbers = Array.from(scannedSerialNumbers);
            const doId = elements.deliveryOrderSelect.val();

            if (!doId || serialNumbers.length === 0) {
                showAlert("Error", "No items to confirm!", "error");
                return;
            }

            Swal.fire({
                title: "Are you sure?",
                text: "Do you want to confirm and move all scans to MasterTable?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, Confirm",
                cancelButtonText: "Cancel"
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const body = serialNumbers;

                        const response = await fetch(`/api/deliveryorder/move-to-mastertable/${doId}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(body)
                        });

                        const data = await response.json();
                        if (response.ok) {
                            showAlert("Success", "Items moved to MasterTable!", "success");
                            elements.deliveryOrderSelect.prop('disabled', false);
                            elements.dataTable.empty();
                            loadDeliveryOrderDetails(doId);
                        } else {
                            showAlert("Error", data.error || "Failed to confirm scans!", "error");
                        }
                    } catch (error) {
                        showAlert("Error", "Failed to confirm scans!", "error");
                    }
                }
            });
        }

        function resetScanList() {
            const selectedCheckboxes = elements.dataTable.find("input.row-checkbox:checked");

            if (selectedCheckboxes.length > 0) {
                Swal.fire({
                    title: "Are you sure?",
                    text: "Do you want to delete the selected scans?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes",
                    cancelButtonText: "Cancel"
                }).then((result) => {
                    if (result.isConfirmed) {
                        selectedCheckboxes.each(function () {
                            const row = $(this).closest("tr");
                            const serial = row.find("td:nth-child(2)").text().trim();
                            scannedSerialNumbers.delete(serial);
                            row.remove();
                        });
                        updateQuantities();
                        showAlert("Deleted!", "Selected scans have been deleted.", "success");
                    }
                });
            } else {
                Swal.fire({
                    title: "Are you sure?",
                    text: "Do you want to reset the entire scan list?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes",
                    cancelButtonText: "Cancel"
                }).then((result) => {
                    if (result.isConfirmed) {
                        scannedSerialNumbers.clear();
                        elements.dataTable.empty();
                        updateQuantities();
                        showAlert("Reset!", "All scans have been reset.", "success");
                    }
                });
            }
        }
        function showAlert(title, text, icon) {
            Swal.fire({ title, text, icon });
        }

        function resetInput() {
            elements.serialNumberInput.val("").focus();
        }
    });

</script>